name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run linter
      run: npm run lint

    - name: Run type check
      run: npm run type-check

    - name: Run tests
      run: npm run test

    - name: Build application
      run: npm run build

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Build application
      run: npm run build

    - name: Build Docker image
      run: docker build -t online-clipboard:test .

    - name: Test Docker image
      run: |
        # 启动容器
        docker run -d --name test-container -p 3000:3000 online-clipboard:test
        
        # 等待健康检查通过
        timeout=300  # 5分钟超时
        interval=10  # 每10秒检查一次
        elapsed=0
        
        echo "Waiting for container to become healthy..."
        while [ $elapsed -lt $timeout ]; do
          if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "✅ Container is healthy after ${elapsed}s"
            echo "Health check response:"
            curl -s http://localhost:3000/api/health
            break
          fi
          
          if [ $elapsed -ge $timeout ]; then
            echo "❌ Container failed to become healthy after ${timeout}s"
            echo "Container logs:"
            docker logs test-container
            docker stop test-container
            docker rm test-container
            exit 1
          fi
          
          echo "⏳ Waiting... (${elapsed}s/${timeout}s)"
          sleep $interval
          elapsed=$((elapsed + interval))
        done
        
        # 清理
        docker stop test-container
        docker rm test-container